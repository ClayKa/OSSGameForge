name: CI/CD Pipeline

on:
  push:
    branches-ignore: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # Python Backend Quality Checks
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements*.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt

      - name: Run Ruff linting
        run: |
          ruff check backend --output-format=github
          
      - name: Run Black formatting check
        run: |
          black --check backend

      - name: Run MyPy type checking
        run: |
          cd backend
          mypy app --ignore-missing-imports

      - name: Run Bandit security linting
        run: |
          bandit -r backend -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            python -m json.tool bandit-report.json
          fi

  # Python Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements*.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-dev.txt

      - name: Run pytest with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          MOCK_MODE: true
          USE_LOCAL_MODEL: false
        run: |
          PYTHONPATH=backend pytest backend/tests \
            --cov=backend \
            --cov-report=xml \
            --cov-report=term-missing \
            --junit-xml=pytest-report.xml \
            -v

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-results
          path: pytest-report.xml

  # Dependency Security Check
  dependency-check:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install safety
        run: pip install safety

      - name: Run safety check
        run: |
          safety check -r backend/requirements.txt --json || true

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: ossgameforge-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          docker compose config
          docker compose up -d postgres minio
          sleep 10
          docker compose ps

  # Frontend checks (placeholder for when frontend is ready)
  frontend-checks:
    name: Frontend Checks
    runs-on: ubuntu-latest
    if: false  # Enable when frontend is implemented
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  # Integration tests (runs on main branch merges)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [backend-quality, backend-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker-compose up -d
          sleep 20
          docker-compose ps

      - name: Run integration tests
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:9001 || exit 1

      - name: Collect logs on failure
        if: failure()
        run: |
          docker-compose logs

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  # All checks passed
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [backend-quality, backend-tests, dependency-check, docker-build]
    steps:
      - name: Success
        run: echo "All CI checks passed successfully!"
