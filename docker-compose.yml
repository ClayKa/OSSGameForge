version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: ossgf-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-ossgameforge}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./devops/docker/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ossgameforge"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ossgf-network

  minio:
    image: minio/minio:latest
    container_name: ossgf-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ossgf-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ossgf-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-ossgameforge}
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      MOCK_MODE: ${MOCK_MODE:-false}
      USE_LOCAL_MODEL: ${USE_LOCAL_MODEL:-false}
      PYTHONUNBUFFERED: 1
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./devops/mocks:/app/mocks:ro
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - ossgf-network

  # Optional: Frontend service (uncomment when ready)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: ossgf-frontend
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   environment:
  #     REACT_APP_API_URL: http://localhost:8000
  #   command: npm run dev
  #   networks:
  #     - ossgf-network

  # Optional: Redis for background tasks (uncomment if using Celery)
  # redis:
  #   image: redis:7-alpine
  #   container_name: ossgf-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - ossgf-network

volumes:
  postgres_data:
  minio_data:
  # redis_data:

networks:
  ossgf-network:
    driver: bridge