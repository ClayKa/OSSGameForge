openapi: 3.0.0
info:
  title: OSSGameForge API
  description: AI-powered game creation suite API specification
  version: 1.0.0
  contact:
    name: OSSGameForge Team
    email: support@ossgameforge.com

servers:
  - url: http://localhost:8000
    description: Local development server
  - url: https://api.ossgameforge.com
    description: Production server

tags:
  - name: Health
    description: Health check endpoints
  - name: Projects
    description: Project management endpoints
  - name: Assets
    description: Asset upload and management
  - name: Generation
    description: AI-powered scene generation
  - name: Export
    description: Scene export functionality

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "ossgameforge-backend"
                  version:
                    type: string
                    example: "1.0.0"
                  mock_mode:
                    type: boolean
                    example: false
                  use_local_model:
                    type: boolean
                    example: false

  /projects:
    get:
      tags:
        - Projects
      summary: List all projects
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    
    post:
      tags:
        - Projects
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "My Game Project"
                description:
                  type: string
                  example: "A platformer game with forest theme"
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /projects/{project_id}:
    get:
      tags:
        - Projects
      summary: Get project details
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found

  /projects/{project_id}/assets:
    post:
      tags:
        - Assets
      summary: Upload a new asset
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
                - user_consent
              properties:
                file:
                  type: string
                  format: binary
                  description: The asset file to upload
                user_consent:
                  type: boolean
                  description: User consent for asset usage
                tags:
                  type: array
                  items:
                    type: string
                  description: Optional tags for the asset
      responses:
        '202':
          description: Asset upload accepted for processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  asset_id:
                    type: string
                    format: uuid
                    example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                  status:
                    type: string
                    enum: [processing, processed, failed]
                    example: "processing"
                  message:
                    type: string
                    example: "Asset upload initiated"
        '400':
          description: Bad request (missing consent or invalid file)
        '413':
          description: File too large

    get:
      tags:
        - Assets
      summary: List project assets
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of assets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'

  /assets/{asset_id}:
    get:
      tags:
        - Assets
      summary: Get asset details
      parameters:
        - name: asset_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Asset details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '404':
          description: Asset not found

  /generate:
    post:
      tags:
        - Generation
      summary: Generate a game scene from prompt
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prompt
                - project_id
              properties:
                prompt:
                  type: string
                  description: The generation prompt
                  example: "Create a platformer level with floating islands"
                project_id:
                  type: string
                  description: The project ID to generate for
                assets:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Optional asset IDs to include
                style:
                  type: string
                  enum: [platformer, shooter, puzzle, rpg]
                  description: Game style preference
      responses:
        '200':
          description: Scene generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  scene_id:
                    type: string
                    example: "scene_001"
                  scene:
                    $ref: '#/components/schemas/Scene'
                  generation_time:
                    type: number
                    example: 15.2
                    description: Generation time in seconds
        '400':
          description: Invalid request
        '500':
          description: Generation failed

  /export:
    post:
      tags:
        - Export
      summary: Export scene to playable format
      parameters:
        - name: engine
          in: query
          required: true
          schema:
            type: string
            enum: [html5, godot, unity]
            default: html5
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - scene_id
              properties:
                scene_id:
                  type: string
                  description: The scene ID to export
                include_assets:
                  type: boolean
                  default: true
                  description: Include assets in export
      responses:
        '200':
          description: Export successful
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
          headers:
            Content-Disposition:
              schema:
                type: string
                example: 'attachment; filename="game_export.zip"'
        '400':
          description: Invalid export parameters
        '404':
          description: Scene not found

components:
  schemas:
    Project:
      type: object
      properties:
        id:
          type: string
          example: "proj_001"
        name:
          type: string
          example: "My Game Project"
        description:
          type: string
          example: "A platformer game"
        owner:
          type: string
          example: "user_123"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        assets_count:
          type: integer
          example: 5
        scenes_count:
          type: integer
          example: 2

    Asset:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
        filename:
          type: string
          example: "player_sprite.png"
        path:
          type: string
          example: "/assets/player_sprite.png"
        type:
          type: string
          enum: [image, audio, video, model]
        status:
          type: string
          enum: [processing, processed, failed]
        metadata:
          type: object
          description: Asset-specific metadata
        consent_hash:
          type: string
          description: Hash of user consent
        exif_stripped:
          type: boolean
          description: Whether EXIF data has been removed
        created_at:
          type: string
          format: date-time

    Scene:
      type: object
      properties:
        id:
          type: string
          example: "scene_001"
        project_id:
          type: string
        name:
          type: string
          example: "Level 1"
        description:
          type: string
        version:
          type: string
          example: "1.0.0"
        metadata:
          type: object
          properties:
            width:
              type: integer
              example: 1920
            height:
              type: integer
              example: 1080
            background_color:
              type: string
              example: "#87CEEB"
            theme:
              type: string
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        created_at:
          type: string
          format: date-time

    Entity:
      type: object
      properties:
        id:
          type: string
          example: "entity_001"
        type:
          type: string
          enum: [player, platform, enemy, collectible, goal, obstacle]
        name:
          type: string
        position:
          type: object
          properties:
            x:
              type: number
            y:
              type: number
        size:
          type: object
          properties:
            width:
              type: number
            height:
              type: number
        sprite:
          type: string
          description: Path to sprite asset
        color:
          type: string
          description: Hex color code
        physics:
          type: object
          properties:
            gravity:
              type: boolean
            collision:
              type: boolean
            static:
              type: boolean
            mass:
              type: number
        properties:
          type: object
          description: Entity-specific properties

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []